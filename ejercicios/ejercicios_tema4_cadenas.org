#+TITLE: Ejercicios del Tema 4
#+SUBTITLE: Cadenas de caracteres
#+AUTHOR: 
#+DATE: 
#+SETUPFILE: config.org
#+PROPERTY: header-args :exports none
#+EXPORT_FILE_NAME: ejercicios_tema4_cadenas.pdf


* 1. Espacios por guiones

Escribe  un programa que cambie los espacios en blanco por un guión bajo =_= en la frase siguiente:

#+begin_src C  :exports code
//Usamos \ para escribir varias lineas
  char texto[] = 
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras euismod\
 orci ac porttitor finibus. Curabitur sed tincidunt est, nec mollis\
 lorem. Vestibulum facilisis dolor sit amet faucibus ultrices. Sed\
 pharetra vel erat et ornare. Duis eu lorem non leo dictum\
 egestas. Integer diam arcu, volutpat ut elit vitae, finibus molestie\
 risus. Vivamus sagittis commodo risus vel finibus. Vestibulum\
 vehicula tortor ut ante tincidunt, non tincidunt turpis sodales. Nam\
 orci diam, pulvinar in ante a, dignissim pulvinar magna. Mauris massa\
 tortor, fermentum pretium lobortis sed, luctus vitae\
 tortor. Suspendisse sagittis augue sit amet risus molestie, sed\
 dapibus enim vulputate. Sed tempus risus vel dolor ornare, eget\
 imperdiet ligula aliquam. Mauris ac auctor lacus. Quisque suscipit\
 interdum rutrum. Sed placerat sit amet urna in vulputate. Nulla\
 facilisis mi nisi, vel pulvinar odio auctor posuere.";
#+end_src

#+BEGIN_SRC C 
#include <stdio.h>

// NOTA: se recomienda usar una frase más sencilla para empezar a probar el código

int main()
{
  //Asignamos el texto a una variable char, sin definir la dimension
  //Usamos \ para escribir varias lineas
  char texto[] = 
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras euismod\
 orci ac porttitor finibus. Curabitur sed tincidunt est, nec mollis\
 lorem. Vestibulum facilisis dolor sit amet faucibus ultrices. Sed\
 pharetra vel erat et ornare. Duis eu lorem non leo dictum\
 egestas. Integer diam arcu, volutpat ut elit vitae, finibus molestie\
 risus. Vivamus sagittis commodo risus vel finibus. Vestibulum\
 vehicula tortor ut ante tincidunt, non tincidunt turpis sodales. Nam\
 orci diam, pulvinar in ante a, dignissim pulvinar magna. Mauris massa\
 tortor, fermentum pretium lobortis sed, luctus vitae\
 tortor. Suspendisse sagittis augue sit amet risus molestie, sed\
 dapibus enim vulputate. Sed tempus risus vel dolor ornare, eget\
 imperdiet ligula aliquam. Mauris ac auctor lacus. Quisque suscipit\
 interdum rutrum. Sed placerat sit amet urna in vulputate. Nulla\
 facilisis mi nisi, vel pulvinar odio auctor posuere.";

  int i = 0;
  //Recorremos el texto hasta el final
  while(texto[i] != '\0')
  {
    if(texto[i] == ' ') //Si encuentra un espacio
    {
      texto[i] = '_'; //lo sustituye por un guion bajo
    }
    i++;
  }
  printf("%s\n", texto); //Imprime el resultado

  return 0;    
}
#+END_SRC

#+RESULTS:
| Lorem_ipsum_dolor_sit_amet | _consectetur_adipiscing_elit._Cras_euismod_orci_ac_porttitor_finibus._Curabitur_sed_tincidunt_est | _nec_mollis_lorem._Vestibulum_facilisis_dolor_sit_amet_faucibus_ultrices._Sed_pharetra_vel_erat_et_ornare._Duis_eu_lorem_non_leo_dictum_egestas._Integer_diam_arcu | _volutpat_ut_elit_vitae | _finibus_molestie_risus._Vivamus_sagittis_commodo_risus_vel_finibus._Vestibulum_vehicula_tortor_ut_ante_tincidunt | _non_tincidunt_turpis_sodales._Nam_orci_diam | _pulvinar_in_ante_a | _dignissim_pulvinar_magna._Mauris_massa_tortor | _fermentum_pretium_lobortis_sed | _luctus_vitae_tortor._Suspendisse_sagittis_augue_sit_amet_risus_molestie | _sed_dapibus_enim_vulputate._Sed_tempus_risus_vel_dolor_ornare | _eget_imperdiet_ligula_aliquam._Mauris_ac_auctor_lacus._Quisque_suscipit_interdum_rutrum._Sed_placerat_sit_amet_urna_in_vulputate._Nulla_facilisis_mi_nisi | _vel_pulvinar_odio_auctor_posuere. |



* 2. Letras al revés

Escribe un programa que imprima al revés una palabra o frase introducida por teclado. (ejemplo: casa roja se convierte en (ajor asac).

#+BEGIN_SRC C 
#include <stdio.h>

int main ()
{
  char palabra[12];
  int len, i;
  // Pide la palabra al usuario
  printf("Escribe una palabra o frase (máximo 11 letras):\n");
  scanf("%11[^\n]", palabra);
  
  // Calcula la longitud de la cadena
  i = 0;
  while (palabra[i] != '\0')
  {
    i++;
  }
  len = i;
  
  // Empezamos por el último caracter (len - 1) y retrocedemos hasta
  // el primero (0)
  for(i = len-1; i >= 0; i--)
  {
    printf("%c", palabra[i]);
  }
    
  return 0;
}
#+END_SRC


* 3. Palabra al revés

Escribe un programa que imprima al revés una palabra introducida por teclado. (ejemplo: =casa= se convierte en =asac=).

#+BEGIN_SRC C 
#include <stdio.h>

int main ()
{
  char frase[31];
  int len, i;
  // Pide la frase al usuario
  printf("Escribe una frase (máximo 30 letras):\n");
  gets(frase);
  
  // Calcula la longitud de la cadena
  i = 0;
  while (frase[i] != '\0')
  {
    i++;
  }
  len = i;
  
  // Usamos estas variables para marcar el inicio y fin de una frase
  int fin = len-1;
  int inicio;
  // Empezamos por el último caracter (len - 1) y retrocedemos hasta
  // el primero (0)
  for(i = len-1; i >= 0; i--)
  {
    // En cada espacio hay una nueva palabra. 
    // Asumimos que no hay puntos ni comas (esto podría mejorarse)
    if(( frase[i] == ' ') || (i==0) )
    {
      if ( frase[i] == ' ')
      {
        inicio = i+1;
      }
      else
      {
        inicio = i;  
      }
      // Imprimimos hasta el final de la palabra
      while(inicio <= fin)
      {
        printf("%c", frase[inicio]);
        inicio++;
      }
      // Asignamos el nuevo fin
      fin = i-1;
      printf(" ");
    }
    
  }
    
  return 0;
}
#+END_SRC


* 4. Gira palabras

Escribe un programa que procese la frase del ejercicio 1. Como resultado, cada palabra de la frase debe de escribrila al revés.

#+BEGIN_SRC C 
#include <stdio.h>

// NOTA: se recomienda usar una frase más sencilla para empezar a probar el código

int main()
{
  //Asignamos el texto a una variable char, sin definir la dimension
  //Usamos \ para escribir varias lineas
  char texto[] = 
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras euismod\
 orci ac porttitor finibus. Curabitur sed tincidunt est, nec mollis\
 lorem. Vestibulum facilisis dolor sit amet faucibus ultrices. Sed\
 pharetra vel erat et ornare. Duis eu lorem non leo dictum\
 egestas. Integer diam arcu, volutpat ut elit vitae, finibus molestie\
 risus. Vivamus sagittis commodo risus vel finibus. Vestibulum\
 vehicula tortor ut ante tincidunt, non tincidunt turpis sodales. Nam\
 orci diam, pulvinar in ante a, dignissim pulvinar magna. Mauris massa\
 tortor, fermentum pretium lobortis sed, luctus vitae\
 tortor. Suspendisse sagittis augue sit amet risus molestie, sed\
 dapibus enim vulputate. Sed tempus risus vel dolor ornare, eget\
 imperdiet ligula aliquam. Mauris ac auctor lacus. Quisque suscipit\
 interdum rutrum. Sed placerat sit amet urna in vulputate. Nulla\
 facilisis mi nisi, vel pulvinar odio auctor posuere.";

  // usaremos estas variables para marcar el inicio y el fin de una palabra
  int fin;
  int inicio=0;
  int i = 0;
  //Recorremos el texto hasta el final
  while(texto[i] != '\0')
  {
    if(texto[i] == ' ') //Si encuentra un espacio
    {
      // vamos de fin a inicio para imprimir al reves
      fin = i-1;
      while(fin >= inicio)
      {
        printf("%c", texto[fin]); //Imprime cada letra
        fin--;
      }
      printf(" ");
      inicio = i+1;
    }
    i++;
  }
  fin = i-1;
  while(fin >= inicio)
  {
    printf("%c", texto[fin]); //Imprime cada letra
    fin--;
  }
  
  return 0;    
}
#+END_SRC


* 5. Sustituir string.h

Realice sus propios programas para suplir a las funciones: strlen(), strcpy(), strcat(), strcmp().

  * a. strlen()
#+BEGIN_SRC C 
#include <stdio.h>
#include <string.h>

int main()
{
  char cadena[] = "nombre.apellidos@upm.es";

  int contador = 0;
  while (cadena[contador] != '\0') 
  {
    contador++;
  }
  
  printf("El tamanho de la cadena es %i caracteres\n", contador);
  printf("El tamanho de la cadena es %i caracteres", strlen(cadena));

  return 0;
}
#+END_SRC

  * b. strcpy()
#+BEGIN_SRC C 
#include <stdio.h>
#include <string.h>

int main()
{
  char cadena[] = "david";
  char copia1[10];
  char copia2[10];

  int contador = 0;
  // Se copian todos los caracteres
  while (cadena[contador] != '\0') 
  {
    copia1[contador] = cadena[contador];
    contador++;
  }
  // Al final se anhade el caracter terminador de la cadena
  copia1[contador+1] = '\0';
  printf("Esta es la cadena copiada manualmente: %s \n", copia1);
  strcpy(copia2, cadena);
  printf("Esta es la cadena copiada con strcpy: %s \n", copia2);

  return 0;
}
#+END_SRC

  * c. strcat()
#+BEGIN_SRC C 
#include <stdio.h>
#include <string.h>

int main()
{
  char cadena1[] = "david";
  char cadena2[] = " alvarez";
  char cadenas_juntas[20];

  int contador1 = 0;
  // Se copian todos los caracteres de la primera cadena
  while (cadena1[contador1] != '\0') 
  {
    cadenas_juntas[contador1] = cadena1[contador1];
    contador1++;
  }
  int contador2 = 0;
  while (cadena2[contador2] != '\0') 
  {
    cadenas_juntas[contador1] = cadena2[contador2];
    contador1++;
    contador2++;
  }  
  // Al final se anhade el caracter terminador de la cadena
  cadenas_juntas[contador1+1] = '\0';
  printf("Esta es la cadena junta: %s \n", cadenas_juntas);
  printf("Esta es la cadena junta: %s \n", strcat(cadena1, cadena2));

  return 0;
}
#+END_SRC

  * d. strcmp()
#+BEGIN_SRC C 
#include <stdio.h>
#include <string.h>

int main()
{
  char cadena1[] = "david";
  char cadena2[] = "david";

  int contador = 0;
  while ((cadena1[contador] == cadena2[contador]) && (cadena1[contador] != '\0')) 
  {
    contador++;
  }
  int result;
  if( cadena1[contador] == '\0')
  {
    result = 0;
  }
  else
  {
    if( (cadena1[contador] - cadena2[contador]) < 0)
    {
      result = -1;
    }
    else
    {
      result = 1;
    }
  }
  printf("Resultado comparacion: %i \n", result);
  printf("Resultado comparacion: %i \n", strcmp(cadena1, cadena2));

  return 0;
}
#+END_SRC

* 6. Cuenta letras

Escribe un programa que analice la frase del ejercicio anterior contando en número de veces que aparece cada vocal. Al final del programa, se debe pintar en el terminal, para cada letra, una línea que contiene el mismo númeor de asteríscos que veces aparece esa vocal.

#+begin_src C 
#include <stdio.h>

int main()
{
  char frase[] = //Usamos \ para escribir varias lineas
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras euismod\
 orci ac porttitor finibus. Curabitur sed tincidunt est, nec mollis\
 lorem. Vestibulum facilisis dolor sit amet faucibus ultrices. Sed\
 pharetra vel erat et ornare. Duis eu lorem non leo dictum\
 egestas. Integer diam arcu, volutpat ut elit vitae, finibus molestie\
 risus. Vivamus sagittis commodo risus vel finibus. Vestibulum\
 vehicula tortor ut ante tincidunt, non tincidunt turpis sodales. Nam\
 orci diam, pulvinar in ante a, dignissim pulvinar magna. Mauris massa\
 tortor, fermentum pretium lobortis sed, luctus vitae\
 tortor. Suspendisse sagittis augue sit amet risus molestie, sed\
 dapibus enim vulputate. Sed tempus risus vel dolor ornare, eget\
 imperdiet ligula aliquam. Mauris ac auctor lacus. Quisque suscipit\
 interdum rutrum. Sed placerat sit amet urna in vulputate. Nulla\
 facilisis mi nisi, vel pulvinar odio auctor posuere.";
  
  char vocales[5] = {'a', 'e', 'i', 'o', 'u'};
  int i, j; 
  int nLetra[5] = {0, 0, 0, 0, 0};  //Vector de resultados

  // Cuenta las apariciones de cada vocal, y almacena resultados en nLetra
  i = 0;
  while (frase[i] != '\0') // Recorre la cadena de caracteres
  {
    switch(frase[i]) // Compara el caracter con las vocales
    {
      case 'a':
      case 'A':
        nLetra[0]++;
      break;
    
      case 'e':
      case 'E':
        nLetra[1]++;
      break;
    
      case 'i':
      case 'I':
        nLetra[2]++;
      break;
  
      case 'o':
      case 'O':
        nLetra[3]++;
      break;
  
      case 'u':
      case 'U':
        nLetra[4]++;
      break;
    }
  // Avanzo en la frase  
  i++; 
  }
  // Recorre el vector de resultados, y pinta asteriscos
  // correspondientes a cada letra
  for (i = 0; i < 5; i++)
  { 
    printf("%c: ", vocales[i]);
    for (j = 1; j <= nLetra[i]; j++)
    {
      printf("*");
    }
    printf("\n");
  }
  
  return 0;
}
#+end_src

#+RESULTS:
| a: | ********************************************************                              |
| e: | *******************************************************************                   |
| i: | ************************************************************************************* |
| o: | *****************************************                                             |
| u: | ****************************************************************                      |


* 7. Separa palabras

Escribe un programa que pida al usuario introducir una frase de varias palabras. Pida una nueva frase si ha introducido una sola palabra. Después, imprima cada palabra en una nueva línea.

#+BEGIN_SRC C 
#include <stdio.h>

int main() 
{
    char frase[256];
    int i, masdeunapalabra = 0;  // Cero significa que que no hay espacios, comas o puntos, luego es solo una palabra

    // Solicitar frase al usuario
    do 
    {
        printf("Introduce una frase de varias palabras hasta 255 caracteres: ");
        gets(frase);            // Leer la línea completa, incluyendo espacios

        // Verificar si la frase contiene al menos un espacio, indicando múltiples palabras
        i = 0;
        while(frase[i] != '\0') 
        {  
            // Las palabras pueden separarse por espacios, comas o puntos.
            if ( (frase[i] == ' ') || (frase[i] == ',') || (frase[i] == '.') ) 
            {
                masdeunapalabra = 1; // Se encontró un espacio
                // break;            // Si aquí usamos break podemos ahorrar algunas iteraciones
            }
            i++;
        }
    
        // Si no hay más de una palaba, sumimos que separada por espacio, coma o punto
        if (masdeunapalabra == 0) 
        {
            printf("Por favor, introduce más de una palabra.\n");
        }

    } while (masdeunapalabra == 0); // Repetir mientras no haya separadores (solo una palabra)

    // Imprimir cada palabra en una nueva línea
    printf("Palabras ingresadas:\n");
    i = 0;
    while ( frase[i] != '\0' ) 
    {
        // Si encontramos un espacio, coma o punto cambiamos de linea
        if ((frase[i] == ' ') || (frase[i] == ',') || (frase[i] == '.')) 
        { 
            printf("\n"); // Imprimir nueva línea para la siguiente palabra
        } else 
        {
            printf("%c", frase[i]); // Imprimir caracter actual
        }
        i++;
    }

    return 0;
}
#+END_SRC


* 8. Convertir letras

Escribe un programa que después de introducir una palabra convierta una de cada 2 letras, de mayúsculas a minúsculas, o viceversa. Siga pidiendo palabras hasta que se introduzca el caractrer 0 para terminar el programa. 

#+BEGIN_SRC C 
#include <stdio.h>

int main() 
{
  char palabra[25]; // Vector para almacenar la palabra ingresada.
  int i;

  printf("Introduce una palabra (o 0 para terminar): ");
  // Leer una palabra hasta 4 letras
  scanf("%24s", palabra);
      
  while (palabra[0] != '0') 
  {
    // Convertir y alternar mayúsculas/minúsculas para cada letra.
    i = 0;
    while ( palabra[i] != '\0' ) 
    {
      // Cambiamos solo los caracteres en posiciones pares
      if (i % 2 == 0) 
      {
        // Convertir a mayúscula si es minúscula.
        if (palabra[i] >= 'a' && palabra[i] <= 'z') 
        {
          palabra[i] = palabra[i] - ('a' - 'A');
        }
        // Convertir a minúscula si es mayúscula.
        else 
        {
          if (palabra[i] >= 'A' && palabra[i] <= 'Z') 
          {
            palabra[i] = palabra[i] + ('a' - 'A');
          }
        }
      }
      i++;
    }

    printf("Resultado: %s\n\n", palabra);
    
    printf("Introduce una palabra (o 0 para terminar): ");
    // Leer una palabra hasta 4 letras
    scanf("%24s", palabra);
  }

  printf("Programa terminado.\n");
  return 0;
}
#+END_SRC


* 9. Buscar nombre

Construya un programa que almacene en un vector los nombres de un grupo de n personas y que, a continuación, busque la posición (primer nombre, segundo nombre...) del vector en la que se almacenó el nombre de una persona que el usuario ingresa y comuniquelo. Si dicho nombre no está en el vector, el programa deberá informarlo. Separe los nombres del vector con comas. 

#+BEGIN_SRC C 
#include <stdio.h>

#define MAX_NOMBRE 10

int main() 
{
  char nombres[] = "david,maria,jorge,manuela";
  int i,j, posicion, encontrado;
  char nombreBuscado[MAX_NOMBRE];

  // Pedir al usuario el nombre a buscar
  printf("Ingrese el nombre de la persona a buscar: ");
  scanf("%19s", nombreBuscado);
    
  // Buscar el nombre en la cadena
  encontrado = 0;
  posicion = 0; // Posición inicial del nombre en la lista
  i = 0;
  while (nombres[i] != '\0') 
  {
    posicion++;
    // usamos i para comprobar el vector de nombres
    // usamos j para comprobar el nombre
    // si el nombre es el último, encontraríamos el caracter \0
    j = 0;
    while( (nombreBuscado[j] == nombres[i]) && (nombreBuscado[j] != '\0')) 
    {
      j++;
      i++;
    }
    // Al acabar, comprobamos por qué hemos salido del bucle
    // Si hemos llegado al final del nombre, es que lo hemos encontrado
    if (nombreBuscado[j] == '\0') 
    {
      encontrado = 1;
      printf("El nombre '%s' se encontro en la posicion %i de la lista.\n", nombreBuscado, posicion);
      i++;
    }
    // cualquier otra razón, los nombres no son iguales
    else
    {
      // avanzamos hasta la sigueinte coma o el final del vector
      while( (nombres[i] != ',') && (nombres[i] != '\0') ) 
      {
        i++;
      }
      // avazamos uno más para dejar atrás la coma
      if(nombres[i] == ',')
      {
        i++;  
      }
    }
  }

  if (encontrado == 0) 
  {
    printf("El nombre '%s' no se encontró en la lista.\n", nombreBuscado);
  }

  return 0;
}
#+END_SRC


* 10. Mover letras en palabra

Introduzca una palabra por teclado. Realice un programa que permita llevar la última letra al inicio. Repítalo hasta recomponer nuevamente la palabra ingresada. (ejemplo: casa -> acas -> saca -> asac -> casa).

#+BEGIN_SRC C 
#include <stdio.h>

#define MAX_LONGITUD 20

int main() 
{
    char palabra[MAX_LONGITUD], palabraModificada[MAX_LONGITUD], temp;
    int longitud, i, ciclos = 0;

    printf("Introduzca una palabra: ");
    scanf("%s", palabra);

    // Calcular la longitud de la palabra
    longitud = 0;
    while (palabra[longitud] != '\0')
    {
      longitud++;
    }    
    // Copiar la palabra original a palabraModificada para trabajar sobre ella
    for (i = 0; i <= longitud; i++)
    {
      palabraModificada[i] = palabra[i];
    }
    
    do 
    {
        // Mover la última letra al inicio
        // Primero se hace una copia de la última letra para no perderla
        temp = palabraModificada[longitud - 1];
        // Se mueven el resto de letras una posición
        for (i = longitud - 1; i > 0; i--) 
        {
            palabraModificada[i] = palabraModificada[i - 1];
        }
        // Y se copia la letra guardada al principio en su posición
        palabraModificada[0] = temp;

        // Incrementar el contador de ciclos
        ciclos++;
        printf("Ciclo %i: %s\n", ciclos, palabraModificada);

        // Continuar hasta que la palabra modificada sea igual a la original
    } while (ciclos < longitud);

    printf("La palabra '%s' fue recompuesta después de %i ciclos.\n", palabra, ciclos);

    return 0;
}
#+END_SRC


* 11. Encriptar texto

En este ejercicio debes realizar un programa que encripte una cadena de caracteres empleando un número entero como clave de encriptación. En este programa el contenido de la cadena será tu correo electrónico de la UPM, y la clave se determinará a partir de tu número de matrícula. Todos los valores deben estar asignados dentro del código (no uses scanf o gets).
Debes calcular la suma de las cifras de tu número de matrícula. Si tu número de matrícula es impar, el programa debe asignar un signo negativo al resultado. Por ejemplo, si tu número de matrícula es 12345 el resultado de este paso debe ser -15, y si es 43210 el resultado es 10. Éste valor será la clave de encriptación.
Además, define una cadena de caracteres y asígnale tu correo electrónico de la UPM, crea otra cadena para encriptar el correo. El programa recorre la cadena de caracteres sumando a cada carácter la clave de encriptación (con su signo) salvo a los puntos y a la @, que serán copiados sin cambios.
Para finalizar, el programa debe mostrar en pantalla el correo original y el correo encriptado.

#+BEGIN_SRC C 
#include <stdio.h>
int main()
{
  char correo[] = "nombre.apellidos@upm.es", encriptado[] = "nombre.apellidos@upm.es";
  int matricula = 12345, x, y, suma = 0, i;
  x = matricula;
  while(x > 0)
  {
    y = x % 10;
    suma += y;
    x /= 10;
  }
  if (matricula % 2 != 0)
    suma = - suma;
  i = 0;
  while (correo[i] != '\0')
  {
    if( (correo[i] != '.') && (correo[i] != '@') )
      encriptado[i] = correo[i] + suma;
    else
      encriptado[i] = correo[i];
    i++;
  }
  encripta[i] = '\0';
  printf("El correo original es %s y el encriptado es %s.\n", correo, encriptado);

  return 0;
}
#+END_SRC

