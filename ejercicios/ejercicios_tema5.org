#+TITLE: Ejercicios del Tema 5
#+SUBTITLE: Punteros
#+AUTHOR: 
#+DATE: 
#+SETUPFILE: config.org
#+PROPERTY: header-args :exports none
#+EXPORT_FILE_NAME: ejercicios_tema5.pdf


* Cambio de dos variables 

Escribe un programa que, con una función que trabaja con el paso por referencia, intercambia el valor de dos variables. Emplea el siguiente prototipo:

#+BEGIN_SRC C :exports code
void cambio (int *p, int *q);
#+END_SRC


#+BEGIN_SRC C
#include <stdio.h>

void cambio (int *p, int *q);

int main()
{
  int a = 1, b = 7;

  printf("a vale %d y b vale %d\n", a, b);
  // Función que intercambia el valor de dos variables, accediendo a
  // su dirección de memoria dado que usa el paso por referencia (no
  // entrega ningún resultado)
  cambio(&a, &b);

  printf("a vale %d y b vale %d\n", a, b);

  return 0;
}

void cambio (int *p, int *q)
{
  int aux;
  aux = *p;
  *p = *q;
  *q = aux;
}
#+END_SRC

#+RESULTS:
| a | vale | 1 | y | b | vale | 7 |
| a | vale | 7 | y | b | vale | 1 |


* Suma de un vector

Diseña un programa que calcule la suma de un vector usando una función basada en punteros.

#+BEGIN_SRC C :exports code
int sumaVector(int *vector, int n);
#+END_SRC

#+RESULTS:

#+BEGIN_SRC C
#include <stdio.h>

int sumaVector(int *vector, int n);

int main()
{
  int vals[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
  int suma;

  suma = sumaVector(vals, 9);

  printf("La suma es %i.\n", suma);

  return 0;
}


int sumaVector(int *vector, int n)
{
  int i, suma = 0;
  for (i = 0; i < n; i++)
    suma += *(vector + i); // equivalente a vector[i]

  return suma;
}
#+END_SRC

#+RESULTS:
: La suma es 45.


* Suma minutos
Construye un programa que añada un incremento en minutos a una hora dada en horas y minutos. Este programa utilizará una función según el siguiente prototipo. 

#+begin_src C :exports code
int incHora(int *h, int *m, int inc);
#+end_src
Al hacer la modificación, esta función deberá respetar que las horas estén entre 0 y 23, y los minutos entre 0 y 59. Además, la función devolverá 1 si el incremento ha supuesto cambio de un día a otro, o 0 en caso contrario.

El programa recibirá por teclado los valores de hora, minutos y el incremento, y mostrará en pantalla el resultado.


#+begin_src C
#include <stdio.h>

int incHora(int *h, int *m, int inc);

int main()
{
    int cambio, hora, min, inc;
    scanf("%d %d %d", &hora, &min, &inc);
    cambio = incHora(&hora, &min, inc);
    printf("Cambio:%i H:%i M:%i", cambio, hora, min);
    return 0;
}

int incHora(int *h, int *m, int inc)
{
	*m = *m + inc;
	if (*m >= 60)
	{
		*m = *m - 60;
		*h = *h + 1;
		}
	if (*h >= 24)
	{
		*h = *h - 24;
		return 1;
	} else return 0;	
}
#+end_src

* Ecuación de segundo grado

Escribe un programa que resuelva una ecuación de segundo grado. En primer lugar, debe solicitar al usuario los coeficientes de la ecuación. A continuación, debe resolver la ecuación indicando el tipo de resultado: dos raíces reales, dos raíces complejas conjugadas, una raíz real doble, ecuación lineal, o error en los coeficientes. Debes usar el siguiente prototipo:

#+BEGIN_SRC C :exports code
int raices(float a, float b, float c, float *r1, float *r2);
#+END_SRC

donde =r1= y =r2= son las raíces de la ecuación, y la salida =int= se emplea para indicar el tipo de ecuación.

#+BEGIN_SRC C
#include <stdio.h>
#include <math.h> //para la funcion raiz cuadrada sqrt

// Funcion que combina paso por valor (a, b , c) y referencia (r1 y r2)
int raices(float a, float b, float c, float *r1, float *r2);

int main()
{
  float a, b, c;//coeficientes
  float r1, r2;//raices, soluciones
  int ret;

  printf("Introduzca los coeficientes a, b y c.\n");
  printf("de ax2 + bx + c = 0, separados por espacios.\n");

  scanf("%f %f %f", &a, &b, &c);

  printf("Ecuacion %f x2 + %f x + %f = 0\n",a,b,c);

  ret = raices(a, b, c, &r1, &r2);
  
  switch(ret)
    {
    case 0: printf("Soluciones reales %f %f\n", r1, r2);
      break;
    case 1: printf("Raiz doble %f\n", r1);
      break;
    case 2: printf("Raices complejas conjugadas %f+-i%f\n", r1, r2);
      break;
    case 3: printf("Ecuacion lineal, raiz: %f\n", r1);
      break;
    case 4: printf("Error parametros\n");
      break;
    }
}
// Los datos iniciales se pasan por valor (lectura), y los resultados
// por referencia (escritura)
int raices(float a, float b, float c, float *r1, float *r2)
{
  if(a != 0.0) //ecuacion cuadrada
    {
      float disc;//discriminante
      disc = b * b - 4 * a * c;
      if(disc > 0)//dos soluciones reales
	{
	  *r1 = (-b + sqrt(disc)) / 2 * a;
	  *r2 = (-b - sqrt(disc)) / 2 * a;
	  return 0;
	}
      else if(disc < 0)//soluciones complejas
	{
	  *r1 = -b / 2 * a;
	  *r2 = sqrt(-disc) / 2 * a;
	  return 2;
	}
      else //raiz doble
	{
	  *r1 = *r2 = -b / 2 * a;
	  return 1;
	}
    }
  else //ecuacion no cuadrada
    {
      if(b != 0.0)
	{
	  *r1 = -c / b;
	  return 3;
	}
      else
	return 4;
    }
}
#+END_SRC

* Suma, resta, producto y división de dos números
Escribe un programa que calcule la suma, la resta, el producto, y la división (entregando 0 en caso de división por cero) de dos números reales, utilizando una función según el siguiente prototipo:

#+begin_src C :exports code
int foo(float x, float y, float *suma, float *resta, float *prod, float *div);
#+end_src
Además del resultado de las operaciones, esta función devolverá 1 si el número x es mayor que y, -1 si x es menor que y, 0 si son iguales.
El programa recibirá por teclado el valor de x e y, y mostrará en pantalla los resultados de las operaciones y el indicador de mayor o menor.


#+begin_src C
#include <stdio.h>

int foo(float x, float y,
	float *suma, float *resta,
	float *prod, float *div);
	
int main()
{
    float x, y, s, r, p, d;
    int res;
    scanf("%f %f", &x, &y);
    res = foo(x, y, &s, &r, &p, &d);
    printf("Suma: %f Resta: %f Producto: %f División: %f MayorMenor:%i",
	     s, r, p, d, res);
	return 0;
}

int foo(float x, float y,
	float *suma, float *resta,
	float *prod, float *div)
{
  *suma = x + y;
  *resta = x - y;
  *prod = x * y;
  if (y != 0)
    *div = x / y;
  else *div = 0;

  if (x > y)
    return 1;
  else if (y > x)
    return -1;
  else return 0;
}
#+end_src
* Cuadrantes
Realice un programa que calcule la distancia entre dos puntos introducidos por el usuario mediante el teclado, y que decida el cuadrante en el que está localizado cada punto. El programa debe recibir por teclado las coordenadas x e y de cada punto, sin escribir ningún mensaje en pantalla. A continuación debe calcular la distancia entre los puntos, y el cuadrante de cada uno de ellos, con una función según el siguiente prototipo:

#+begin_src C :exports code
void detPunto(float p1[], float p2[], float *dist, int *cuad1, int *cuad2);
#+end_src

En esta función, =p1= es el primer punto, =p2= el segundo, =dist= es la distancia entre los puntos, =cuad1= el cuadrante del primer punto y =cuad2= el  cuadrante del segundo punto.

Finalmente, mostrará en pantalla los resultados en ese orden separados por un espacio.

#+begin_src C
#include <stdio.h>
#include <math.h>

void detPunto(float p1[], float p2[], float *dist, int *cuad1, int *cuad2);
int cuadrante(float p[]);

int main()
{
  float p1[2], p2[2];
  float dist;
  int cuad1, cuad2;
        
  scanf("%f %f", &p1[0], &p1[1]);
        
  scanf("%f %f", &p2[0], &p2[1]);

  detPunto(p1, p2, &dist, &cuad1, &cuad2);
  
  printf("%f %d %d", dist, cuad1, cuad2);
}

void detPunto(float p1[], float p2[], float *dist, int *cuad1, int *cuad2)
{
  
  *dist = sqrt(pow(p1[0] - p2[0], 2) + pow(p1[1] - p2[1], 2));
  *cuad1 = cuadrante(p1);
  *cuad2 = cuadrante(p2);
}

int cuadrante(float p[])
{
  if (p[0] >= 0 && p[1] >= 0)
    return 1;
  else if (p[0] < 0 && p[1] > 0)
    return 2;
  else if (p[0] < 0 && p[1] < 0)
    return 3;
  else 
    return 4;
}
#+end_src

* Media, máximo y mínimo de un vector de datos

Escribe un programa que calcule el valor medio, el valor máximo y el valor mínimo de los datos contenidos en un vector de números reales empleando punteros. La función de cálculo debe acomodarse al siguiente prototipo:

#+BEGIN_SRC C :exports code
void stats(float *vector, int n, float *media, float *max, float *min);
#+END_SRC

Debes escribir dos versiones diferentes. La primera versión trabajará con un vector de dimensión fija y conocida (p.ej. 5 elementos). La segunda versión debe emplear asignación dinámica de memoria, siguiendo el mismo itinerario que el ejercicio anterior.

/Nota: Este ejercicio es equivalente al ejercicio 6 del capítulo 4 (vectores). En aquel caso se usa notación de vectores, y ahora se debe emplear notación de punteros. Además, allí se usan tres funciones independientes, y ahora se debe usar una única función que entrega los tres resultados./

#+BEGIN_SRC C
#include <stdio.h>
#define N 5

void stats(float *vector, int n, float *media, float *max, float *min);

int main()
{
  float vector[N] = {1.0, 2.0, 3.0, 4.0, 5.0};
  float media, max, min;

  stats(vector, N, &media, &max, &min);

  printf("Media %f, Máximo %f, Mínimo %f",
	 media, max, min);

  return 0;
}

  
void stats(float *vector, int n, float *media, float *max, float *min)
{
  float suma = 0;
  float *p;
  float *fin = vector + n;

  // Media
  for (p = vector; p < fin; ++p)
    suma += *p;

  *media = suma / n;

  // Maximo
  *max = vector[0]; //El maximo inicial es el primer elemento
  // Busca en el vector algún valor mayor
  for (p = vector; p < fin; ++p)
    if (*p > *max) *max = *p; // y lo sustituye si lo encuentra

  //Minimo
  *min = vector[0];
  for (p = vector; p < fin; ++p)
    if (*p < *min) *min = *p;
}
#+END_SRC

#+RESULTS:

* Longitud de una cadena de caracteres

Diseña un programa que calcule la longitud de una cadena de caracteres usando una función basada en punteros.

#+BEGIN_SRC C :exports code
int stringLength(char *string);
#+END_SRC

#+BEGIN_SRC C 
#include <stdio.h>

int stringLength(char *string);

int main()
{
  int len;
  char mensaje[] = "Hello World!";

  len = stringLength(mensaje);
  
  printf("Longitud %i\n", len);

  return 0;
}


int stringLength(char *string)
{
  // p es un puntero movil, que apunta inicialmente al primer caracter
  // de la cadena string
  char *p = string;
  // Movemos el puntero a lo largo de la cadena hasta llegar al final
  while (*p != '\0')
    ++p;
  // La distancia entre el puntero p y string (primer caracter) es el
  // numero de caracteres de la cadena
  return p - string;
}
#+END_SRC

#+RESULTS:
: Longitud 12

* Copia de cadenas de caracteres

Diseña un programa que copie dos cadenas de caracteres usando una función basada en punteros. Esta función imita el comportamiento de la función =strcpy= de la librería =string.h= (véase el capítulo 4, diapositiva 40).

#+BEGIN_SRC C :exports code
void copyString(char *to, char *from);
#+END_SRC

#+BEGIN_SRC C
#include <stdio.h>

int copyString(char *to, char *from);

int main()
{
  char mensaje1[] = "Hello World!";
  char mensaje2[20];

  copyString(mensaje2, mensaje1);
  
  printf("%s\n", mensaje2);

  return 0;
}

int copyString(char *to, char *from)
{
  while (*from != '\0')
    {
      *to = *from;
      to++;
      from++;
    }
  // Añadimos el caracter 0 como cierre de la cadena
  *to = '\0';
}
#+END_SRC

#+RESULTS:


* Movimiento de un punto (estructura)

Construye un programa que sirva para mover un punto contenido en el plano (usando un tipo de datos =punto=) usando funciones basada en punteros a la estructura =punto=. El programa funciona con la interacción del usuario a partir de las teclas 'w' (arriba), 'a' (izquierda), 'x' (abajo), 'd' (derecha), y sus correspondientes mayúsculas. Por ejemplo, si el usuario aprieta la tecla 'w' el punto se desplaza hacia arriba una unidad, y si aprieta 'W' se desplaza cinco unidades hacia arriba. El programa muestra en pantalla las coordenadas del punto tras cada interacción del usuario.
El programa termina cuando el usuario pulsa la tecla 'q'.

#+BEGIN_SRC C :exports code
// Función para controlar el desplazamiento horizontal, siendo xy el
// punto, y n el número de unidades a desplazar
void horizontal(punto *xy, int n);
// Función para controlar el desplazamiento vertical
void vertical(punto *xy, int n);
#+END_SRC

#+BEGIN_SRC C
#include <stdio.h>

typedef struct
{
  int x, y;
} punto;


// Función para controlar el desplazamiento horizontal, siendo xy el
// punto, y n el número de unidades a desplazar
void horizontal(punto *xy, int n);
// Función para controlar el desplazamiento vertical
void vertical(punto *xy, int n);

int main()
{
  punto p1 = {0, 0};
  char tecla;
  printf("(%i, %i)\n", p1.x, p1.y);
  while (tecla != 'q')
    {
      fflush(stdin);
      scanf("%c", &tecla);
      switch(tecla)
	{
	case 'a':
	  horizontal(&p1, -1);
	  break;
	case 'd':
	  horizontal(&p1, 1);
	  break;
	case 'A':
	  horizontal(&p1, -5);
	  break;
	case 'D':
	  horizontal(&p1, 5);
	  break;
	case 'w':
	  vertical(&p1, 1);
	  break;
	case 'x':
	  vertical(&p1, -1);
	  break;
	case 'W':
	  vertical(&p1, 5);
	  break;
	case 'X':
	  vertical(&p1, -5);
	  break;
	}

      printf("(%i, %i)\n", p1.x, p1.y);
    }
  return 0;
}


void horizontal(punto *xy, int n)
{
  xy->x += n;
}

void vertical(punto *xy, int n)
{
    xy->y += n;
}
#+END_SRC

* Asignación dinámica de memoria
Escribe un programa que permita al usuario rellenar un vector de dimensión variable. En primer lugar, el programa pregunta al usuario el número de elementos que tendrá el vector. A continuación, empleando asignación dinámica de memoria, el programa reservará memoria para este vector, y solicitará al usuario los valores del mismo. Finalmente, el programa mostrará el contenido de este vector.

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>

int main()
{
  int i, n;
  int *p;

  printf("Nº datos? ");
  scanf("%d", &n);
  // Reservamos n direcciones de memoria del tamaño de un int. El
  // resultado de malloc es la dirección inicial, que almacenamos en
  // un puntero. Este puntero equivale al elemento 0 de un vector de n
  // elementos.
  p = malloc(sizeof(int) * n);
  // Comprobamos que hay memoria disponible, y comunicamos error en su
  // caso
  if (p == NULL)
    {
      printf("Error de memoria.\n");
      exit(-1);
    }
  // Si todo ha ido bien recorremos el puntero-vector para rellenarlo
  // de contenido
  for(i = 0; i < n; i++) 
    {
      scanf("%d", p + i);
    }
  // Y ahora lo mostramos
  for(i = 0; i < n; i++) 
    {
      printf("%d", *(p + i));
    }
  // Una vez terminado, liberamos la memoria
  free(p);

  return 0;
}
#+END_SRC

* Estaciones agroclimáticas 

Escriba un programa capaz de procesar información básica de unas estaciones agroclimáticas. Aunque lo habitual es que la información esté disponible en un fichero, en este ejercicio la información será introducida por teclado. En primer lugar, el usuario introducirá el número de estaciones disponibles. A continuación introducirá la información de cada estación separando por punto y coma los datos. 

La información de una estación es: identificador numérico, longitud, latitud, y altitud.  A partir de esta información el programa debe determinar:
- La estación (representada por su identificador, su longitud y su latitud) situada más al norte (máximo valor de latitud).
- El valor promedio de la altura de todas las estaciones.

El programa terminará mostrando estos resultados en pantalla.

#+begin_src C
#include <stdio.h>
#include <stdlib.h>

int maximo(float *x, int n);
float promedio(float *x, int n);

int main()
{
  int N, i;
  int *estacion;
  float *lat, *lon, *alt;
  int iLatMax;
  float altProm;

  scanf("%d", &N);
  // Reservo memoria para las variables teniendo en cuenta el tipo
  // de datos y el número de estaciones
  estacion = malloc(N * sizeof(int));
  if (estacion == NULL) {
    printf("Error: memoria no disponible.\n");
    exit(-1);
  }

  lat = malloc(N * sizeof(float));
  if (lat == NULL) {
    printf("Error: memoria no disponible.\n");
    exit(-1);
  }

  lon = malloc(N * sizeof(float));
  if (lon == NULL) {
    printf("Error: memoria no disponible.\n");
    exit(-1);
  }

  alt = malloc(N * sizeof(float));
  if (alt == NULL) {
    printf("Error: memoria no disponible.\n");
    exit(-1);
  }
  // Leo datos y almaceno información en variables
  for (i = 0; i < N;i++)
    scanf("%i;%f;%f;%f",
	  estacion + i,
	  lon + i,
	  lat + i,
	  alt + i);
  // Localizo máximos y mínimos.
  iLatMax = maximo(lat, N);
  altProm = promedio(alt, N);

  // Escribo resultados en pantalla
  printf("%d %f %f\n%f",
	 *(estacion + iLatMax),
	 *(lon + iLatMax),
	 *(lat + iLatMax),
	 altProm);
  // Libera punteros
  free(estacion);
  free(lat);
  free(lon);
  free(alt);

  return 0;
}

int maximo(float *x, int n)
{
  int i, iMax = 0; //El maximo inicial es el primer elemento
  // Busca en el vector algún valor mayor
  for (i = 1; i < n; i++)
    if (*(x + i) > *(x + iMax)) 
       iMax = i; // y lo sustituye si lo encuentra
  return iMax;
}

float promedio(float *x, int n)
{
  int i;
  float media = 0.0;

  for (i = 0; i < n; i++)
    media += *(x + i);
  return media / n;
}
#+end_src

