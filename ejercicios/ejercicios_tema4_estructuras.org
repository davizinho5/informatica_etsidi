#+TITLE: Ejercicios del Tema 4, estructuras
#+SUBTITLE: Estructuras
#+AUTHOR: 
#+DATE: 
#+SETUPFILE: config.org
#+PROPERTY: header-args :exports none
#+EXPORT_FILE_NAME: ejercicios_tema4_estructuras.pdf

* Distancia entre puntos

Escribe un programa que calcule la distancia entre dos puntos introducidos por el usuario, y que decida el cuadrante en el que está localizado cada punto. Este programa debe emplear la estructura punto capaz de almacenar dos coordenadas x e y de tipo float. 

#+BEGIN_SRC C :exports code  :exports code
#include <stdio.h>
#include <math.h>

typedef struct
{
  float x;
  float y;
} punto;

int main()
{
  punto a, b;
  float d;
  int cuadrante;

  printf("Escribe las coordenadas del punto 1:\n");
  scanf("%f %f", &a.x, &a.y);

  printf("Escribe las coordenadas del punto 2:\n");
  scanf("%f %f", &b.x, &b.y);

  if (a.x > 0 && a.y > 0)
  {
    cuadrante = 1;
  }
  else if (a.x < 0 && a.y > 0)
  {
    cuadrante = 2;
  }
  else if (a.x < 0 && a.y < 0)
  {
    cuadrante = 3;
  }
  else if (a.x > 0 && a.y < 0)
  {
    cuadrante = 4;
  }
  else 
  {
    cuadrante = 0; // Punto en un eje   
  }
 
  printf("El punto 1 está en el cuadrante %i.\n", cuadrante);
  
  if (b.x > 0 && b.y > 0)
  {
    cuadrante = 1;
  }
  else if (b.x < 0 && b.y > 0)
  {
    cuadrante = 2;
  }
  else if (b.x < 0 && b.y < 0)
  {
    cuadrante = 3;
  }
  else if (b.x > 0 && b.y < 0)
  {
    cuadrante = 4;
  }
  else 
  {
    cuadrante = 0; // Punto en un eje   
  }

  printf("El punto 2 está en el cuadrante %i.\n", cuadrante);

  printf("La distancia entre los puntos es %f.\n", sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2)));
  
  return 0;
}
#+END_SRC

* Vector de puntos

Realiza un programa que pida al usuario un número =n= de puntos indicando sus coordenadas (estructura =punto= definida en el ejercicio anterior) y los introduzca en un vector. El programa debe indicar el total de puntos que hay en cada uno de los cuadrantes.

Ejemplo de funcionamiento:

#+BEGIN_EXAMPLE
Indique el numero de puntos a introducir:
3
Introduzca x1, y1:
3 8
Introduzca x2, y2:
-1 8
Introduzca x3, y3:
-3 3
El total de puntos por cuadrante es:
   Cuadrante 1 = 1
   Cuadrante 2 = 2
   Cuadrante 3 = 0
   Cuadrante 4 = 0
#+END_EXAMPLE

#+BEGIN_SRC C
#include <stdio.h>

typedef struct
{
  float x;
  float y;
} punto;

int main()
{
  int i, n;
  int iCuad; // indice auxiliar para cuadrantes
  // Vector contador de puntos por cuadrante. 
  // El primer elemento se usa para puntos en ejes y origen
  int vCuad[5] = {0, 0, 0, 0, 0}; 
  
  // No sabemos cuantos puntos son, definimos nosotros un limite que seran 100 puntos
  punto puntos[100]; //Vector suficientemente grande. Es un vector de
                     //estructuras, cuyos componentes son de tipo punto.

  printf("Dime el número de puntos (< 100).\t");
  scanf("%i", &n);
  
  // Pido datos al usuario
  for (i = 0; i < n; i++)
  {
    printf("Punto %d:\n", i + 1);
    // Relleno el vector de puntos
    scanf("%f %f", &puntos[i].x, &puntos[i].y);      
  }

  // Se recorre el vector 
  for (i = 0; i < n; i++)
  {
    if (puntos[i].x > 0 && puntos[i].y > 0)
    {
      iCuad = 1;
    }
    else if (puntos[i].x < 0 && puntos[i].y > 0)
    {
      iCuad = 2;
    }
    else if (puntos[i].x < 0 && puntos[i].y < 0)
    {
      iCuad = 3;
    }
    else if (puntos[i].x > 0 && puntos[i].y < 0)
    {
      iCuad = 4;
    }
    else 
    {
      iCuad = 0; // Punto en un eje   
    }  
    
    // y actualizo el vector contador
    vCuad[iCuad] = vCuad[iCuad] + 1;
  }

  // Finalmente muestro los resultados
  printf("Puntos por cuadrante:\n");
  for (i = 0; i < 5; i++)
  {
    printf("\t Cuadrante %d: %d \n", i, vCuad[i]);
  }
  
  return 0;
}
#+END_SRC


* Distancia entre dos instantes temporales

Escribe un programa que calcule la distancia temporal entre dos instantes. Este programa debe emplear la estructura =tiempo= (horas, minutos, segundos) para almacenar la información de cada instante. 
Por ejemplo, si la estructura =t1= representa el instante =3:45:15= y la estructura =t2= representa el instante =9:44:03=, la distancia temporal debe ser la estructura =5:58:48=. 
Es importante tener en cuenta la posibilidad de que entre =t1= y =t2= se encuentre la medianoche.


#+BEGIN_SRC C
#include <stdio.h>

typedef struct
{
  int hour, min, sec;
} tiempo;


int main()
{
  tiempo t1 = {3, 45, 15};
  tiempo t2 = {9, 44, 3};
  tiempo dt;
  
  //Restamos segundos, teniendo en cuenta restas negativas
  if (t1.sec > t2.sec)
  {
    t2.min = t2.min - 1;
    t2.sec = t2.sec + 60;
  }

  dt.sec = t2.sec - t1.sec;

  //Idem para minutos
  if (t1.min > t2.min)
  {
    t2.hour = t2.hour - 1;
    t2.min = t2.min + 60;
  }
  dt.min = t2.min - t1.min;

  //Idem para horas, peor ahora t2 puede corresponder al dia siguiente
  if (t1.hour > t2.hour)
  {
    t2.hour += 24;
  }
  dt.hour = t2.hour - t1.hour;
  
  printf("%i:%i:%i", dt.hour, dt.min, dt.sec);
  
  return 0;
}
#+END_SRC

#+RESULTS:
: 5:58:48


* Contacto

Define la estructura =contacto= con los campos nombre, primer apellido, segundo apellido, y fecha de nacimiento. Esta estructura emplea internamente la estructura =fecha= para almacenar la fecha de nacimiento (día, mes y año).

Escribe un programa que lea los datos de dos contactos, y los almacene en un vector de estructuras. A continuación debe imprimir los datos del que sea más mayor, o ambos si tienen la misma edad.


#+BEGIN_SRC C :exports code
#include <stdio.h>

typedef struct
{
  int d, m, a;
} fecha;

typedef struct
{
  char nombre[50];
  char apellido1[50];
  char apellido2[50];
  fecha fechaNac;
} contacto;

int main()
{
  int i, iComp;
  // Se puede usar un vector de ejemplo para probar rapidamente el programa:
  // Descomentar estas lineas y no pedir al usuario datos para una prueba rápida
  /*contacto contactos[2] = { 
    {"N1", "A1", "B1", {10, 2, 2010}}, 
    {"N2", "A2", "B2", {11, 2, 2010}} 
  };   */
  
  contacto contactos[2]; // Vector que almacena los contactos

  //  Recorremos el vector rellenando los datos de cada contacto
  for (i = 0; i < 2; i++)
  {
    printf("Datos del contacto %d:\n", i + 1);
    printf("Nombre: \t");
    scanf("%s", contactos[i].nombre);
    printf("Primer apellido: \t");
    scanf("%s", contactos[i].apellido1);
    printf("Segundo apellido: \t");
    scanf("%s", contactos[i].apellido2);
    printf("Fecha de nacimiento (dia/mes/año): \t");
    scanf("%i/%i/%i", &contactos[i].fechaNac.d, &contactos[i].fechaNac.m, &contactos[i].fechaNac.a);
  }

  // Comparamos las fechas de los contactos
  if (contactos[0].fechaNac.a < contactos[1].fechaNac.a)
  {
    iComp = -1;
  }
  else if (contactos[0].fechaNac.a > contactos[1].fechaNac.a)
  {
    iComp = 1;
  }
  else
  {
    if (contactos[0].fechaNac.m < contactos[1].fechaNac.m)
    {
      iComp = -1;
    }
    else if (contactos[0].fechaNac.m > contactos[1].fechaNac.m)
    {
      iComp = 1;      
    }
    else
    {
      if (contactos[0].fechaNac.d < contactos[1].fechaNac.d)
      {
        iComp = -1;
      }
      else if (contactos[0].fechaNac.d > contactos[1].fechaNac.d)
      {
        iComp = 1;      
      }
      else
      {
        iComp = 0;      
      }
    }
  }  
  // Dependiendo del resultado imprimimos el que corresponda
  switch(iComp)
  {
    case -1:
      printf("%s %s %s\t", contactos[0].nombre, contactos[0].apellido1, contactos[0].apellido2);
      printf("(%i/%i/%i) \n", contactos[0].fechaNac.d, contactos[0].fechaNac.m, contactos[0].fechaNac.a);   
      break;
    case 1:
      printf("%s %s %s\t", contactos[1].nombre, contactos[1].apellido1, contactos[1].apellido2);
      printf("(%i/%i/%i) \n", contactos[1].fechaNac.d, contactos[1].fechaNac.m, contactos[1].fechaNac.a);
      break;
    case 0:
      printf("%s %s %s\t", contactos[0].nombre, contactos[0].apellido1, contactos[0].apellido2);
      printf("(%i/%i/%i) \n", contactos[0].fechaNac.d, contactos[0].fechaNac.m, contactos[0].fechaNac.a); 
      printf("%s %s %s\t", contactos[1].nombre, contactos[1].apellido1, contactos[1].apellido2);
      printf("(%i/%i/%i) \n", contactos[1].fechaNac.d, contactos[1].fechaNac.m, contactos[1].fechaNac.a);      
      break;
  }
  
  return 0;  
}
#+END_SRC

*  Análisis de texto

Escriba un programana que lea un texto de hasta 100 caracteres. A continuación, se debe realizar un análisis del texto contando: número de vocales, número de consonantes y número de otros caracteres. Además, se debe calcular el valor medio (según tabla ASCII) de los caracteres que componen el texto (sin contar los espacios). Tanto el texto como los resultados de los cálculos deben almacenarse en una estructura que defina el programador.

#+BEGIN_SRC C :exports code
#include <stdio.h>

typedef struct
{
  char texto[101];
  int num_vocal;
  int num_cons;
  int num_carac_esp;
  float media;  
}datos_texto;

int main(void)
{
  // variable de tipo datos_texto
  datos_texto analisis;
  
  // lectura de hasta 100 caracteres
  printf("Escriba el texto a analizar: \n");
  scanf("%100[^\n]", analisis.texto);
  
  // recorrer el texto hasta el final
  int i=0;
  analisis.media = 0;         // para hacer la suma de los valores ascii
  analisis.num_vocal = 0;     // Inicializamos a 0
  analisis.num_cons = 0;      // Inicializamos a 0
  analisis.num_carac_esp = 0; // Inicializamos a 0
  int cuenta_caracteres = 0;  // para contar el numero de caracteres 
  
  while(analisis.texto[i] != '\0')
  {  
    // si no es un espacio
    if(analisis.texto[i] != ' ')  
    {
      cuenta_caracteres++;
      analisis.media = analisis.media + analisis.texto[i];
    
      // si es letra
      if((analisis.texto[i] >= 'a') && (analisis.texto[i] <= 'z') || 
         (analisis.texto[i] >= 'A') && (analisis.texto[i] <= 'Z'))
      {
        // si es vocal
        if((analisis.texto[i] == 'a' ) || (analisis.texto[i] == 'A') || 
           (analisis.texto[i] == 'e' ) || (analisis.texto[i] == 'E') ||
           (analisis.texto[i] == 'i' ) || (analisis.texto[i] == 'I') ||
           (analisis.texto[i] == 'o' ) || (analisis.texto[i] == 'O') ||
           (analisis.texto[i] == 'u' ) || (analisis.texto[i] == 'U') )
        {
          analisis.num_vocal++;  
        }
        else // consonante
        {
          analisis.num_cons++;
        }       
      }
      else // otro caracter
      {
        analisis.num_carac_esp++;
      }
    }
    // Nos movemos en la cadena
    i++;  
  }
  if (analisis.media > 0)
  {
    analisis.media = analisis.media / cuenta_caracteres;  
  }
  
  printf("\n Num vocales: %i", analisis.num_vocal);  
  printf("\n Num contantes: %i", analisis.num_cons);  
  printf("\n Num otros caracteres: %i", analisis.num_carac_esp);  
  printf("\n Media Ascii: %f", analisis.media);  
  
  return 0;
}
#+END_SRC

*   Datos empleados

Escriba un programana que almacene los datos de 10 empleados de una empresa. La información de cada empleado será introducida por teclado y estará compuesta de tres campos: nombre, salario anual y horas de trabajo semanales. Se pide realizar un programa que permira rellenar los datos de los empleados. A continuación, busque al trabajador/a de la empresa que más dinero gane por hora, y al que menos, e imprima en pantalla su nombre y sueldo por hora.

#+BEGIN_SRC C :exports code
#include <stdio.h>

// Para probar el programa, se recomienda hacerlo con N = 2
#define N 10

typedef struct
{
  char nombre[15];
  int salario;
  float horas;   
  float sueldo_hora;
}empleado;

int main () 
{
  empleado personal[N];
  // Rellanar cada estructura del vector pidiendo datos al usuario/
  int i;
  for(i=0; i<N; i++)
  {
    printf("\nIntroduzca los datos del empleado numero %i.", i+1);
    printf("\nNombre: \n");
    scanf("%s", personal[i].nombre);
    printf("\nSalario anual: \n");
    scanf("%i", &personal[i].salario);
    printf("\nHoras por semana: \n");
    scanf("%f", &personal[i].horas);
    // 365 días al año, 30 de vacaciones y 15 festivos, quedarían unos 320 días
    // como en el cálculo anterior no hay fines de semana, repartimos las horas semanales en 7 dias
    // Calcular el sueldo por hora 
    personal[i].sueldo_hora = personal[i].salario / ((personal[i].horas/7)*320);
    
    printf("%s %i %.2f %.2f\n", personal[i].nombre, personal[i].salario, personal[i].horas, personal[i].sueldo_hora);
    
  } 
  // Comparar sueldo por hora
  // Suponemos que el mayor y el menor con el primer empleado
  // Y vamos comparando uno a uno con los demás
  int mayor = 0;
  int menor = 0;
  for(i=1; i<N; i++)
  {
    // cuando encontramos un nuevo mayor o menor
    // guardamos la posicion
    if(personal[i].sueldo_hora > personal[mayor].sueldo_hora)
    {
      mayor = i;
    }
    if(personal[i].sueldo_hora < personal[menor].sueldo_hora)
    {
      menor = i;
    }
  }
    
  // Imprimir mayor
  printf("\nMayor: %i, %s\n", mayor, personal[mayor].nombre);
  // Imprimir menor  
  printf("\nMenor: %i, %s\n", menor, personal[menor].nombre);
      
  return 0;
}

#+END_SRC
